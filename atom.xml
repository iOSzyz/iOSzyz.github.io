<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>享受每一天</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-09T03:44:35.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>张亚哲(走向全栈的小白)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mdcc2016跨平台分享</title>
    <link href="http://yoursite.com/2016/10/09/mdcc2016%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2016/10/09/mdcc2016跨平台分享/</id>
    <published>2016-10-09T03:36:54.000Z</published>
    <updated>2016-10-09T03:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>#移动端跨平台<br><img src="http://od0zwrx7y.bkt.clouddn.com/IMG_0500.JPG" alt=""></p>
<h3 id="Web应用-VS-原生应用"><a href="#Web应用-VS-原生应用" class="headerlink" title="Web应用 VS 原生应用"></a>Web应用 VS 原生应用</h3><hr>
<h4 id="Web应用优势"><a href="#Web应用优势" class="headerlink" title="Web应用优势"></a>Web应用优势</h4><ul>
<li>一次编写,几乎可以在所有平台运行</li>
<li>搜索引擎可爬性</li>
<li>版本控制简单</li>
<li>可分享性</li>
</ul>
<h4 id="Web应用的问题"><a href="#Web应用的问题" class="headerlink" title="Web应用的问题"></a>Web应用的问题</h4><ul>
<li>页面的载入时间,离线体验</li>
<li>无法利用主屏幕图标,推送通知等功能增强应用画面外的<br>互动</li>
<li>受限于浏览器的实现,用户体验难以匹敌 Native 应用</li>
<li>相机,音频,视频,后台,振动,剪贴板,应用内支付……</li>
<li>Android 的老旧机种上的性能问题</li>
</ul>
<h4 id="原生应用优势"><a href="#原生应用优势" class="headerlink" title="原生应用优势"></a>原生应用优势</h4><ul>
<li>响应速度及缓存</li>
<li>更强的用户交互性 推送通知等交互</li>
<li>用户体验做的更好</li>
<li>性能优化等方面控制更好</li>
</ul>
<h4 id="原生应用的问题"><a href="#原生应用的问题" class="headerlink" title="原生应用的问题"></a>原生应用的问题</h4><ul>
<li>多平台需要多人开发，iOS、Android 等（以后出现其他平台需要更多人去适配）</li>
<li>版本控制不便</li>
<li>上线修复bug需要发布新版本（热更新不能解决全部问题）</li>
<li>iOS 上线发布等待时间长（即便现在速度提高很多）</li>
</ul>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>尽可能地将现有的 Web 应用快速包装成 Native 应用上线</li>
<li>尽可能让现有的开发者轻松上手 Native 的开发</li>
<li>尽可能实现 iOS/Android/Web 间跨平台的代码复用,减少未来<br> 多平台对应可能带来的负担</li>
<li><p>快速进行版本更新迭代  </p>
<p><img src="http://od0zwrx7y.bkt.clouddn.com/QQ20161009-0@2x.png" alt=""></p>
</li>
</ul>
<h2 id="动态配置方案"><a href="#动态配置方案" class="headerlink" title="动态配置方案"></a>动态配置方案</h2><ul>
<li><p>从 Server 获取配置 –&gt; 解析 –&gt; 执行native代码<br>很多时候，我们自觉或者不自觉的利用 JSON 文件实现动态配置的     效果，它的核心流程是：</p>
<ul>
<li>通过 HTTP 请求获取 JSON 格式的配置文件。</li>
<li>配置文件中标记了每一个元素的属性，比如位置，颜色，图片 URL   等。</li>
<li>解析完 JSON 后，我们调用 Objective-C 的代码，完成 UI 控件的渲染。  </li>
</ul>
<p>缺陷明显：不能处理复杂业务逻辑的改变 只能配置一些简单设置</p>
</li>
</ul>
<p>##驱动原生 已是一种移动App端技术流派</p>
<ul>
<li>采用原生渲染,摒弃Webkit渲染,提升体验</li>
<li>一般都采用Web语言作为基础开发语言,降低学习成本</li>
<li>种种迹象表明,一种叫“小程序” 的东西也是驱动原生型</li>
</ul>
<h4 id="tips-怎么查看app是否是原生-or-webkit-Android版"><a href="#tips-怎么查看app是否是原生-or-webkit-Android版" class="headerlink" title="tips:怎么查看app是否是原生 or webkit(Android版)"></a>tips:怎么查看app是否是原生 or webkit(Android版)</h4><p><img src="http://od0zwrx7y.bkt.clouddn.com/QQ20161009-1@2x.png" alt=""><br><img src="http://od0zwrx7y.bkt.clouddn.com/QQ20161009-2@2x.png" alt=""></p>
<p>##初识 React （前端JS框架）</p>
<ul>
<li>FaceBook 推出 React 框架</li>
<li>把一组相关的 HTML 标签，也就是 app 内的 UI 控件，封装进一个组件(Component)中  </li>
</ul>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native:"></a>React Native:</h2><blockquote>
<p>一个基于 JavaScript，具备动态配置能力，面向前端开发者的移动端开发框架，React Native<br>    它的宗旨是让前端开发者像用 React 写网页那样，用 React Native 写移动端应用</p>
<p>Learn once，Write anywhere!</p>
</blockquote>
<p>  React Native 希望前端开发者学习完 React 后，能够用同样的语法、工具等，分别开发安卓和 iOS 平台的应用并且不用一行原生代码</p>
<p>  如果用一个词概括 React Native，那就是：Native 版本的 React。</p>
<p>###Weex</p>
<p>weex 是阿里推送的一款基于Node.js,轻量级的移动端跨平台动态性技术解决方案,用于构建原生的速度的跨平台APP.</p>
<h4 id="Weex-amp-ReactNative对比"><a href="#Weex-amp-ReactNative对比" class="headerlink" title="Weex&amp;ReactNative对比"></a>Weex&amp;ReactNative对比</h4><blockquote>
<p>JS引擎：</p>
<p>weex使用V8， ReactNative使用JSCore  </p>
<p>iOS上weex依然使用JSCore而在安卓上weex使用了V8</p>
</blockquote>
<p>安卓ReactNative虽然使用了JSCore，但这个JSCore不是系统源生的，而是直接打入app包里的WebKit库，这也是为啥安卓项目引入RN包大小会增大4~5M的原因，ReactNative在iOS上JSCore是系统自带的，完全无法打入app包内，所以iOS的包大小，引入RN后变化并没有那么夸张</p>
<p>来到了weex，反正安卓RN都是完全自己植入进去的一整个JSCore，那不如把JSCore换成最新的V8引擎，但是iOS就不同了，iOS继续使用系统自带的JSCore还是方便的，系统自带的不用白不用</p>
<h6 id="框架对比"><a href="#框架对比" class="headerlink" title="框架对比"></a>框架对比</h6><blockquote>
<p>vue vs react</p>
<p>react模板JSX学习使用有一定的成本 vue更接近常用的web开发方式，模板就是普通的html，数据绑定使用mustache风格，样式直接使用css</p>
</blockquote>
<h5 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h5><p>组件的扩展上，weex和ReactNative具有一样的能力</p>
<p>三方库的接入上，weex对网络，图片，统计等常见的用户可能想自己定制的功能，提供了相应的适配接口，可以由用户方便的定制，ReactNative需要自己修改源码</p>
<p>ReactNative其实是一个可以任意扩展支持的框架，你down下来的源码，你发现实现不了的功能，扩展一下，妥妥没问题，你down下来的源码，你发现性能有问题？很卡？（说的就是listview！）我去自己扩展一个啊~iOS基于tableview自己重写一个带重用cell的RNTableview~安卓基于recycleview，重写一个哈？我始终认为，RN是一个思路，不是一个死的框架</p>
<h4 id="RN原理-weex原理基本是一致的（iOS为例）"><a href="#RN原理-weex原理基本是一致的（iOS为例）" class="headerlink" title="RN原理 - weex原理基本是一致的（iOS为例）"></a>RN原理 - weex原理基本是一致的（iOS为例）</h4><ul>
<li>首先要明白的一点是，即使使用了 React Native，我们依然需要 UIKit 等框架，调用的是 Objective-C 代码。总之，JavaScript 只是辅助，它只是提供了配置信息和逻辑的处理结果。React Native 与 Hybrid 完全没有关系，它只不过是以 JavaScript 的形式告诉 Objective-C 该执行什么代码。<br><img src="http://blog.cnbang.net/wp-content/uploads/2015/03/ReactNative1.png" alt=""></li>
<li>React Native 能够运行起来，全靠 Objective-C 和 JavaScript 的交互。对于没有接触过 JavaScript 的人来说，非常有必要理解 JavaScript 代码如何被执行。</li>
<li>苹果提供了一个叫做 JavaScript Core 的框架，这是一个 JavaScript 引擎。 </li>
<li>由于 JavaScript Core 是一个面向 Objective-C 的框架，在 Objective-C 这一端，我们对 JavaScript 上下文知根知底，可以很容易的获取到对象，方法等各种信息，当然也包括调用 JavaScript 函数。真正复杂的问题在于，JavaScript 不知道 Objective-C 有哪些方法可以调用。React Native 解决这个问题的方案是在 Objective-C 和 JavaScript 两端都保存了一份配置表，里面标记了所有 Objective-C 暴露给 JavaScript 的模块和方法。这样，无论是哪一方调用另一方的方法，实际上传递的数据只有 ModuleId、MethodId 和 Arguments 这三个元素，它们分别表示类、方法和方法参数，当 Objective-C 接收到这三个值后，就可以通过 runtime 唯一确定要调用的是哪个函数，然后调用这个函数。</li>
</ul>
<p><a href="http://blog.cnbang.net/tech/2698/" target="_blank" rel="external">React Native通信机制详解</a> </p>
<p>##React Native 优缺点分析</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>复用了 React 的思想，有利于前端开发者涉足移动端。</li>
<li>能够利用 JavaScript 动态更新的特性，快速迭代。</li>
<li>相比于原生平台，开发速度更快，相比于 Hybrid 框架，性能更好。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>做不到 Write once, Run everywhere，也就是说开发者依然需 要为 iOS 和 Android 平台提供两套不同的代码，比如参考官方文 档可以发现不少组件和API都区分了 Android 和 iOS 版本。即使是共用组件，也会有平台独享的函数。</li>
<li>不能做到完全屏蔽 iOS 端或 Android 的细节，前端开发者必须对原生平台有所了解。加重了学习成本。对于移动端开发者来说，完全不具备用 React Native 开发的能力。</li>
<li>由于 Objective-C 与 JavaScript 之间切换存在固定的时间开销，所以性能必定不及原生。比如目前的官方版本无法做到 UItableview(ListView) 的视图重用，因为滑动过程中，视图重用需要在异步线程中执行，速度太慢。这也就导致随着 Cell 数量的增加，占用的内存也线性增加。</li>
</ul>
<blockquote>
<p>利用脚本语言进行原生平台开发的一次成功尝试，降低了前端开发者入门移动端的门槛，一定业务场景下具有独特的优势，不太可能取代原生平台开发。作为混合开发是提高效率的一种解决方案。</p>
</blockquote>
<p>##展望</p>
<ul>
<li>ReactNative 让 JavaScript 开发者可以不用学习新的语 言,直接开发 Native 应用</li>
<li>ReactNative 内部的 Bridge 的概念,让 ReactNative 拥 有无限的可能性,只要有人开发 Bridge 的话就可以兼容 新平台<br>展望</li>
<li>ReactNative 将会巩固其 JavaScript 跨平台方案的决定 性低位,今后也会有越来越多的使用案例</li>
<li>React 团队在 React.js Conf 上提到了 ReactNative代码 在 Web 的复用问题,或许可以期待官方或者社区的动作</li>
<li>通过 ReactNative 开发跨平台应用, iOS/Android/Web 开发者可以在 High Level 使用相同的语言进行开发</li>
</ul>
<h2 id="应用（混合型应用开发）"><a href="#应用（混合型应用开发）" class="headerlink" title="应用（混合型应用开发）"></a>应用（混合型应用开发）</h2><h4 id="美团点评-RN实践"><a href="#美团点评-RN实践" class="headerlink" title="美团点评 RN实践"></a>美团点评 RN实践</h4><p> RN嵌入方式  Native APP + RN</p>
<ul>
<li>JS包很小，不到1MB</li>
<li>每个功能都有RN重复500多k代码</li>
<li>热更新功能</li>
<li>基于现有app，RN实现几个功能 </li>
</ul>
<p>工程结构 MDCC 客户端实例  </p>
<p>##什么界面适合用RN 去做 ？</p>
<h2 id="RN增量热更新思路"><a href="#RN增量热更新思路" class="headerlink" title="RN增量热更新思路"></a>RN增量热更新思路</h2><p><img src="http://upload-images.jianshu.io/upload_images/129169-28efc6d931943344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>###必需的软件</p>
<ul>
<li>Homebrew: Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件</li>
<li>Node.js</li>
<li>React Native的命令行工具（react-native-cli）</li>
<li>安装watchman watchman是用于监听文件变化的工具，应该是用于监听文件变化，然后界面做出响应。</li>
<li>flow用于对代码进行类型检查，用于静态分析js语法错误的工具</li>
<li>nvm 是 Node.js 的版本管理器，可以轻松安装并管理各个版本的 Node.js </li>
<li>nvm安装node.js和npm</li>
</ul>
<p>###初始化项目</p>
<pre><code>react-native init RN_demo
</code></pre><p><a href="http://www.jianshu.com/p/978c4bd3a759" target="_blank" rel="external">React Native 从入门到原理</a></p>
<p><a href="http://awhisper.github.io/2016/07/22/Weex-ReactNative-JSPatch/" target="_blank" rel="external">Weex &amp; ReactNative &amp; JSPatch</a></p>
<p><a href="http://www.jianshu.com/p/1809897c094c" target="_blank" rel="external">ReactNative 增量热更新思路</a></p>
<p><a href="http://reactnative.cn/" target="_blank" rel="external">reactnative中文网</a></p>
<p><a href="http://reactnative.cn/docs/0.31/getting-started.html#content" target="_blank" rel="external">搭建开发环境</a></p>
<p><a href="http://www.jianshu.com/p/d70e2e29f8ec" target="_blank" rel="external">搭建开发环境 简书</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#移动端跨平台&lt;br&gt;&lt;img src=&quot;http://od0zwrx7y.bkt.clouddn.com/IMG_0500.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Web应用-VS-原生应用&quot;&gt;&lt;a href=&quot;#Web应用-VS-原生应用&quot; class=&quot;he
    
    </summary>
    
    
  </entry>
  
</feed>
